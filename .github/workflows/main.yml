name: Default
on:
  merge_group:
  push:
    branches:
      - main
      - releases/*
  pull_request:
    types: [assigned, opened, synchronize, reopened, labeled]
permissions:
  contents: write
  pull-requests: write
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  PR:
    if: github.event_name == 'pull_request'
    name: Check PR Title
    runs-on: "shipfox-2vcpu-ubuntu-2404"
    permissions:
      statuses: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Dirty:
    runs-on: "shipfox-4vcpu-ubuntu-2404"
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Setup Env
        uses: ./.github/actions/default
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - run: >
          nix --extra-experimental-features "nix-command" --extra-experimental-features "flakes" develop --impure --command just pre-commit
        env:
          SPEAKEASY_API_KEY: ${{ secrets.SPEAKEASY_API_KEY }}
      - name: Get changed files
        id: changed-files
        shell: bash
        run: "hasChanged=$(git status --porcelain) \nif (( $(echo ${#hasChanged}) != 0 )); then\n  git status\n  echo \"There are changes in the repository\"\n  exit 1\nfi\n"
      - name: Validate Dependabot PR
        if: github.event.pull_request.user.login == 'dependabot[bot]'
        run: gh pr review $PR_URL --approve -b "Auto approve dependencies bump PR"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Merge Dependabot PR
        if: github.event.pull_request.user.login == 'dependabot[bot]'
        run: gh pr merge $PR_URL
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{secrets.NUMARY_GITHUB_TOKEN}}
  Tests:
    runs-on: "shipfox-8vcpu-ubuntu-2404"
    needs:
      - Dirty
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Setup Env
        uses: ./.github/actions/default
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - run: >
          nix --extra-experimental-features "nix-command" --extra-experimental-features "flakes" develop --impure --command just tests
        env:
          SPEAKEASY_API_KEY: ${{ secrets.SPEAKEASY_API_KEY }}
  GoReleaser:
    runs-on: "shipfox-4vcpu-ubuntu-2404"
    if: contains(github.event.pull_request.labels.*.name, 'build-images') || github.ref == 'refs/heads/main' || github.event_name == 'merge_group'
    needs:
      - Dirty
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Setup Env
        uses: ./.github/actions/default
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - run: >
          nix --extra-experimental-features "nix-command" --extra-experimental-features "flakes" develop --impure --command just release-ci
        env:
          GITHUB_TOKEN: ${{ secrets.NUMARY_GITHUB_TOKEN }}
          SPEAKEASY_API_KEY: ${{ secrets.SPEAKEASY_API_KEY }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  Deploy:
    runs-on: "formance-runner"
    if: github.ref == 'refs/heads/main'
    environment: staging
    needs:
      - GoReleaser
      - Tests
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - uses: earthly/actions-setup@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: "latest"
          use-cache: false
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: "Deploy in staging"
        env:
          TAG: ${{ github.sha }}
          ARGOCD_REGION_AUTH_TOKEN: ${{ secrets.ARGOCD_REGION_AUTH_TOKEN }}
        run: >
          earthly --no-output  --secret AUTH_TOKEN=$ARGOCD_REGION_AUTH_TOKEN +deploy-staging --TAG=$TAG

